# Global values (if any)
global:
  domain: myapp.local # Example domain for ingress

# Configuration for the customer-service subchart
# NOTE: For local development (Minikube/Kind/Docker Desktop), build the image locally
# (e.g., `docker build -t customer-service:latest in customer-service dir)
# and ensure your K8s cluster can access local images (e.g., `minikube docker-env` or `kind load docker-image ...`).
customer-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: customer-service # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8081
  ingress:
    enabled: true
    className: "nginx" # Specify your ingress controller class
    hosts:
      - host: customer.myapp.local # Use global domain or specific
        paths:
          - path: /
            pathType: ImplementationSpecific
  # Database connection details passed to customer-service configmap
  config:
    # --- CORRECTED DB URL --- Using '<ReleaseName>-<Alias>' service name convention
    database_url: "jdbc:postgresql://{{ .Release.Name }}-customer-db:5432/customerdb"
    # Secret reference for password is more secure
    database_username: "customer_user"
    # database_password_secret: "{{ .Release.Name }}-customer-db-postgresql" # Reference to secret created by DB chart
    # database_password_secret_key: "postgresql-password" # Key within the secret

fraud-service:
  replicaCount: 1
  image:
    repository: fraud-service
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8082
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: fraud.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-fraud-db:5432/frauddb"
    database_username: "fraud_user"
    # database_password_secret: "{{ .Release.Name }}-fraud-db-postgresql"
    # database_password_secret_key: "postgresql-password"

notification-service:
  replicaCount: 1
  image:
    repository: notification-service
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8083
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: notification.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-notification-db:5432/notificationdb"
    database_username: "notification_user"
    # database_password_secret: "{{ .Release.Name }}-notification-db-postgresql"
    # database_password_secret_key: "postgresql-password"

exchange-service:
  replicaCount: 1
  image:
    repository: exchange-service
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8086
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: exchange.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-exchange-db:5432/exchangedb"
    database_username: "exchange_user"
    # database_password_secret: "{{ .Release.Name }}-exchange-db-postgresql"
    # database_password_secret_key: "postgresql-password"

exchange-generator-service:
  replicaCount: 1
  image:
    repository: exchange-generator-service
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8087
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: exchange-generator.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific

front-ui-service:
  replicaCount: 1
  image:
    repository: front-ui-service
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8085
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: front-ui.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  config:
    keycloak_issuer_url: "http://keycloak.{{ .Release.Namespace }}.svc.cluster.local:8080/realms/bank-realm"
    keycloak_server_url: "http://keycloak.{{ .Release.Namespace }}.svc.cluster.local:8080"

keycloak:
  replicaCount: 1
  image:
    repository: quay.io/keycloak/keycloak
    tag: "26.1.3"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8080
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: keycloak.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  env:
    adminUser: admin
    adminPassword: admin

# Configuration for the order-service subchart
# NOTE: Build image locally: `docker build -t order-service:latest in order-service dir
order-service:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: order-service # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8084 # Different port for order service
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: order.myapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  config:
    # --- CORRECTED DB URL --- Using '<ReleaseName>-<Alias>' service name convention
    database_url: "jdbc:postgresql://{{ .Release.Name }}-order-db:5432/orderdb"
    database_username: "order_user"
    # database_password_secret: "{{ .Release.Name }}-order-db-postgresql"
    # database_password_secret_key: "postgresql-password"

# Configuration for the customer-db (PostgreSQL dependency)
# Values here are prefixed according to the Bitnami PostgreSQL chart's structure
# Check the Bitnami chart's values.yaml for all available options
customer-db:
  enabled: true
  # Override values from the official postgresql chart
  auth:
    database: customerdb
    username: customer_user
    # Use existingSecret or provide password (less secure for production)
    # existingSecret: "{{ .Release.Name }}-customer-db-postgresql" # Name of the secret to use/create
    password: "changeM3Customer!" # Example: Not recommended for production
  primary:
    persistence:
      enabled: true
      size: 1Gi # Small size for example

# Configuration for the order-db (PostgreSQL dependency)
order-db:
  enabled: true
  auth:
    database: orderdb
    username: order_user
    # existingSecret: "{{ .Release.Name }}-order-db-postgresql"
    password: "changeM3Order!"
  primary:
    persistence:
      enabled: true
      size: 1Gi

# Configuration for the exchange-db (PostgreSQL dependency)
exchange-db:
  enabled: true
  auth:
    database: exchangedb
    username: exchange_user
    # existingSecret: "{{ .Release.Name }}-exchange-db-postgresql"
    password: "changeM3Exchange!"
  primary:
    persistence:
      enabled: true
      size: 1Gi