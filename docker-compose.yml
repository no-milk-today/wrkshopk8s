services:
  customer-db:
    container_name: customer-db
    image: postgres:15
    environment:
      POSTGRES_DB: customer
      POSTGRES_USER: ${PG_USER:-customer_user}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-password}
      PGDATA: /data/postgres
    volumes:
      - postgres_customer:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    container_name: keycloak-bank
    image: quay.io/keycloak/keycloak:26.1.3
    command: [ "start-dev", "--import-realm" ]
    ports:
      - "8090:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    volumes:
      - ./keycloak/config:/opt/keycloak/data/import  # Монтируем папку с realm-файлом
    networks:
      - postgres
    restart: unless-stopped
    depends_on:
      - customer-db

  fraud-db:
    container_name: fraud-db
    image: postgres:15
    environment:
      POSTGRES_DB: fraud
      POSTGRES_USER: ${PG_USER:-fraud_user}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-password}
      PGDATA: /data/postgres
    volumes:
      - postgres_fraud:/data/postgres
    ports:
      - "5433:5432"
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  notification-db:
    container_name: notification-db
    image: postgres:15
    environment:
      POSTGRES_DB: notification
      POSTGRES_USER: ${PG_USER:-notification_user}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-password}
      PGDATA: /data/postgres
    volumes:
      - postgres_notification:/data/postgres
    ports:
      - "5434:5432"
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  exchange-db:
    container_name: exchange-db
    image: postgres:15
    environment:
      POSTGRES_DB: exchange
      POSTGRES_USER: ${PG_USER:-exchange_user}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-password}
      PGDATA: /data/postgres
    volumes:
      - postgres_exchange:/data/postgres
    ports:
      - "5436:5432"
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
  kafka:
    image: apache/kafka:4.0.0
    container_name: bank-kafka
    ports:
      - '9092:9092'
    networks:
      - kafka-network
    environment:
      # === Уникальные идентификаторы ноды ===
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller

      # === Listeners: три типа соединений ===
      # PLAINTEXT - для Kafka UI внутри Docker-сети
      # CONTROLLER - для KRaft контроллера
      # EXTERNAL - для Java-приложений с хост-машины
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092

      # === Advertised Listeners: адреса для клиентов ===
      # kafka:19092 - для Kafka UI (через имя контейнера)
      # localhost:9092 - для Java Producer/Consumer (через хост)
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:19092,EXTERNAL://localhost:9092

      # === Протоколы безопасности для каждого listener'а ===
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT

      # === Имя listener'а для контроллера ===
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER

      # === Кворум контроллеров (у нас 1 нода с ID=1) ===
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093

      # === Replication Factor = 1 (одна нода, нет репликации) ===
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

      # === Директория для хранения данных Kafka ===
      KAFKA_LOG_DIRS: /tmp/kraft-logs

      # === Cluster ID для KRaft режима (должен быть одинаковый) ===
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk

    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: bank-kafka-ui
    ports:
      - '7080:8080'
    networks:
      - kafka-network
    environment:
      # Имя кластера в UI
      KAFKA_CLUSTERS_0_NAME: local
      # Подключение к Kafka через PLAINTEXT listener (kafka:19092)
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:19092
      # Разрешить динамическую конфигурацию кластеров через UI
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - kafka
    restart: unless-stopped

networks:
  postgres:
    driver: bridge
  spring:
    driver: bridge
  kafka-network:
    driver: bridge

volumes:
  postgres_customer:
  postgres_fraud:
  postgres_notification:
  postgres_exchange:
