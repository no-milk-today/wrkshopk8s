pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        DB_PASSWORD     = credentials('DB_PASSWORD')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        DB_NAME         = 'mydb'
        DB_USER         = 'myuser'
        IMAGE_TAG       = "latest"
    }

    stage('Build Common Dependencies') {
        steps {
            // Сначала собираем parent и clients ОДИН РАЗ
            sh 'mvn clean install -DskipTests -pl clients'
        }
    }

    stages {
        stage('Build & Unit Tests') {
            parallel {
                stage('Customer Service') {
                    steps {
                        // run from / so that parent pom and modules are visible
                        sh 'mvn -pl customer-service clean test'
                    }
                }
                stage('Order Service') {
                    steps {
                        sh 'mvn -pl order-service clean test'
                    }
                }
                stage('Fraud Service') {
                    steps {
                        sh 'mvn -pl fraud-service clean test'
                    }
                }
                stage('Notification Service') {
                    steps {
                        sh 'mvn -pl notification-service clean test'
                    }
                }
                stage('Exchange Service') {
                    steps {
                        sh 'mvn -pl exchange-service clean test'
                    }
                }
                stage('Exchange Generator Service') {
                    steps {
                        sh 'mvn -pl exchange-generator-service clean test'
                    }
                }
                stage('FrontUI Service') {
                    steps {
                        sh 'mvn -pl front-ui-service clean test'
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t customer-service:${IMAGE_TAG} -f customer-service/Dockerfile .
                docker build -t fraud-service:${IMAGE_TAG} -f fraud-service/Dockerfile .
                docker build -t notification-service:${IMAGE_TAG} -f notification-service/Dockerfile .
                docker build -t order-service:${IMAGE_TAG} -f order-service/Dockerfile .
                docker build -t exchange-service:${IMAGE_TAG} -f exchange-service/Dockerfile .
                docker build -t exchange-generator-service:${IMAGE_TAG} -f exchange-generator-service/Dockerfile .
                docker build -t front-ui-service:${IMAGE_TAG} -f front-ui-service/Dockerfile .
                """
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                    sh """
                    echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
                    """
                }
            }
        }

//         stage('Install PostgreSQL to TEST') {
//             steps {
//                 sh """
//                 helm upgrade --install postgres oci://registry-1.docker.io/bitnamicharts/postgresql \\
//                   --namespace test --create-namespace \\
//                   --set auth.database=${DB_NAME} \\
//                   --set auth.username=${DB_USER} \\
//                   --set auth.password=${DB_PASSWORD} \\
//                   --set image.registry=docker.io \\
//                   --set image.repository=bitnamilegacy/postgresql \\
//                   --set image.tag=latest \\
//                   --set image.pullPolicy=IfNotPresent \\
//                   --set primary.persistence.enabled=false \\
//                   --wait --timeout 5m
//                 """
//             }
//         }
//
//         stage('Wait for PostgreSQL in TEST') {
//             steps {
//                 sh """
//                 kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=postgresql \\
//                   -n test --timeout=300s
//                 """
//             }
//         }
//
//         stage('Create DB Secrets for TEST') {
//             steps {
//                 sh """
//                 kubectl create secret generic customer-service-customer-db \\
//                   --from-literal=password=${DB_PASSWORD} \\
//                   -n test --dry-run=client -o yaml | kubectl apply -f -
//
//                 kubectl create secret generic order-service-order-db \\
//                   --from-literal=password=${DB_PASSWORD} \\
//                   -n test --dry-run=client -o yaml | kubectl apply -f -
//
//                 kubectl create secret generic fraud-service-fraud-db \\
//                   --from-literal=password=${DB_PASSWORD} \\
//                   -n test --dry-run=client -o yaml | kubectl apply -f -
//
//                 kubectl create secret generic notification-service-notification-db \\
//                   --from-literal=password=${DB_PASSWORD} \\
//                   -n test --dry-run=client -o yaml | kubectl apply -f -
//
//                 kubectl create secret generic exchange-service-exchange-db \\
//                   --from-literal=password=${DB_PASSWORD} \\
//                   -n test --dry-run=client -o yaml | kubectl apply -f -
//                 """
//             }
//         }
//
//         stage('Helm Deploy to TEST') {
//             steps {
//                 sh """
//                 helm upgrade --install customer-service my-microservices-app/charts/customer-service \\
//                   --namespace test --create-namespace \\
//                   --set image.repository=customer-service \\
//                   --set image.tag=${IMAGE_TAG} \\
//                   --set ingress.enabled=true \\
//                   --set ingress.hosts[0].host=customer.test.local \\
//                   --set ingress.hosts[0].paths[0].path="/" \\
//                   --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
//
//                 helm upgrade --install order-service my-microservices-app/charts/order-service \\
//                   --namespace test --create-namespace \\
//                   --set image.repository=order-service \\
//                   --set image.tag=${IMAGE_TAG} \\
//                   --set ingress.enabled=true \\
//                   --set ingress.hosts[0].host=order.test.local \\
//                   --set ingress.hosts[0].paths[0].path="/" \\
//                   --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
//
//                 helm upgrade --install fraud-service my-microservices-app/charts/fraud-service \\
//                   --namespace test --create-namespace \\
//                   --set image.repository=fraud-service \\
//                   --set image.tag=${IMAGE_TAG} \\
//                   --set ingress.enabled=true \\
//                   --set ingress.hosts[0].host=fraud.test.local \\
//                   --set ingress.hosts[0].paths[0].path="/" \\
//                   --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
//
//                 helm upgrade --install notification-service my-microservices-app/charts/notification-service \\
//                   --namespace test --create-namespace \\
//                   --set image.repository=notification-service \\
//                   --set image.tag=${IMAGE_TAG} \\
//                   --set ingress.enabled=true \\
//                   --set ingress.hosts[0].host=notification.test.local \\
//                   --set ingress.hosts[0].paths[0].path="/" \\
//                   --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
//
//                 helm upgrade --install exchange-service my-microservices-app/charts/exchange-service \\
//                   --namespace test --create-namespace \\
//                   --set image.repository=exchange-service \\
//                   --set image.tag=${IMAGE_TAG} \\
//                   --set ingress.enabled=true \\
//                   --set ingress.hosts[0].host=exchange.test.local \\
//                   --set ingress.hosts[0].paths[0].path="/" \\
//                   --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
//
//                 helm upgrade --install exchange-generator-service my-microservices-app/charts/exchange-generator-service \\
//                   --namespace test --create-namespace \\
//                   --set image.repository=exchange-generator-service \\
//                   --set image.tag=${IMAGE_TAG} \\
//                   --set ingress.enabled=true \\
//                   --set ingress.hosts[0].host=exchange-generator.test.local \\
//                   --set ingress.hosts[0].paths[0].path="/" \\
//                   --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
//
//                 helm upgrade --install front-ui-service my-microservices-app/charts/front-ui-service \\
//                   --namespace test --create-namespace \\
//                   --set image.repository=front-ui-service \\
//                   --set image.tag=${IMAGE_TAG} \\
//                   --set ingress.enabled=true \\
//                   --set ingress.hosts[0].host=front-ui.test.local \\
//                   --set ingress.hosts[0].paths[0].path="/" \\
//                   --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
//                 """
//             }
//         }

        stage('Manual Approval for PROD') {
            steps {
                input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
            }
        }

        stage('Install PostgreSQL to PROD') {
            steps {
                sh """
                helm upgrade --install postgres oci://registry-1.docker.io/bitnamicharts/postgresql \\
                  --namespace prod --create-namespace \\
                  --set auth.database=${DB_NAME} \\
                  --set auth.username=${DB_USER} \\
                  --set auth.password=${DB_PASSWORD} \\
                  --set image.registry=docker.io \\
                  --set image.repository=bitnamilegacy/postgresql \\
                  --set image.tag=latest \\
                  --set image.pullPolicy=IfNotPresent \\
                  --set primary.persistence.enabled=false \\
                  --wait --timeout 5m
                """
            }
        }

        stage('Wait for PostgreSQL in PROD') {
            steps {
                sh """
                kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=postgresql \\
                  -n prod --timeout=300s
                """
            }
        }

        stage('Create DB Secrets for PROD') {
            steps {
                sh """
                kubectl create secret generic customer-service-customer-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n prod --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic order-service-order-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n prod --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic fraud-service-fraud-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n prod --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic notification-service-notification-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n prod --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic exchange-service-exchange-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n prod --dry-run=client -o yaml | kubectl apply -f -
                """
            }
        }

        stage('Helm Deploy to PROD') {
            steps {
                sh """
                helm upgrade --install keycloak my-microservices-app/charts/keycloak \\
                  --namespace prod --create-namespace \\
                  --set configMap.enabled=true \\
                  --set image.tag="26.1.3" \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=keycloak.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install customer-service my-microservices-app/charts/customer-service \\
                  --namespace prod --create-namespace \\
                  --set image.repository=customer-service \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=customer.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install order-service my-microservices-app/charts/order-service \\
                  --namespace prod --create-namespace \\
                  --set image.repository=order-service \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=order.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install fraud-service my-microservices-app/charts/fraud-service \\
                  --namespace prod --create-namespace \\
                  --set image.repository=fraud-service \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=fraud.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install notification-service my-microservices-app/charts/notification-service \\
                  --namespace prod --create-namespace \\
                  --set image.repository=notification-service \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=notification.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install exchange-service my-microservices-app/charts/exchange-service \\
                  --namespace prod --create-namespace \\
                  --set image.repository=exchange-service \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=exchange.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install exchange-generator-service my-microservices-app/charts/exchange-generator-service \\
                  --namespace prod --create-namespace \\
                  --set image.repository=exchange-generator-service \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=exchange-generator.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install front-ui-service my-microservices-app/charts/front-ui-service \\
                  --namespace prod --create-namespace \\
                  --set image.repository=front-ui-service \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=front-ui.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
                """
            }
        }
    }
}